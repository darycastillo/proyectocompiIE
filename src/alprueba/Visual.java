/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alprueba;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dary Castillo
 */
public class Visual extends javax.swing.JFrame {
private Map<Token, String> Expre;
DefaultTableModel dtm = new DefaultTableModel();
    /**
     * Creates new form Visual
     */
    public Visual() {
        initComponents();
        String[]til = new String[]{"Token","Lexema"};
        dtm.setColumnIdentifiers(til);
        jTable1.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        Txp_IngresoTexto = new javax.swing.JTextPane();
        Bt_OK = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Txp_SalidaTexto = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        borrar = new javax.swing.JButton();

        jScrollPane3.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(Txp_IngresoTexto);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 210, 430));

        Bt_OK.setBackground(new java.awt.Color(255, 51, 153));
        Bt_OK.setText("Analizar >>");
        Bt_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bt_OKActionPerformed(evt);
            }
        });
        getContentPane().add(Bt_OK, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, 117, 48));

        jScrollPane2.setViewportView(Txp_SalidaTexto);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 240, 420));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 330, 420));

        jScrollPane5.setViewportView(jTextPane1);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 660, 90));

        borrar.setText("Borrrar");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });
        getContentPane().add(borrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 460, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Bt_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bt_OKActionPerformed

        try {
            //new Analizar().analizar(Txp_IngresoTexto);
           analizar(Txp_IngresoTexto);
            // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Bt_OKActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        Txp_IngresoTexto.setText(" ");
        Txp_SalidaTexto.setText(" ");
        Expre.clear();
    }//GEN-LAST:event_borrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new Visual().setVisible(true);
            Visual v = new Visual();
            v.setVisible(true);
            v.setLocationRelativeTo(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bt_OK;
    private javax.swing.JTextPane Txp_IngresoTexto;
    private javax.swing.JTextPane Txp_SalidaTexto;
    private javax.swing.JButton borrar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

public void escribir(String texto)
{
    Txp_SalidaTexto.setText(texto);
}
    
  public void analizar(JTextPane area) throws IOException{
         Expre = new TreeMap<Token, String>(); 
        File fichero = new File ("EntradaLex.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(fichero);
            writer.print(area.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Visual.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reader reader = new BufferedReader(new FileReader("EntradaLex.txt"));
        Lexer lexer = new Lexer (reader);
        String salida="";//para escribir en el text area
        String holis= "";
        while(true){
            Token token = lexer.yylex();
            
            if(token==null){
                System.out.println("FIN DE ARCHIVO");
                return;
            }
            switch(token){
                case SUSTANTIVO: 
                case ADJ_POSESIVO: case ADJ_DEMOSTRATIVO: case ADJ_CALIFICATIVO: case ADJ_NUMERAL_CARDINAL: case ADJ_NUMERAL_ORDINAL: case ADJ_INDEFINIDO:
                case ART_DEFINIDO:  case ART_INDEFINIDO: 
                case PRO_PERSONAL: case PRO_NUMERAL: case PRO_DEMOSTRATIVO: case PRO_INTERROGATIVO:
                case VER_IRREGULAR_INFINITO: case VER_IRREGULAR_PASADOSIMPLE: case VER_IRREGULAR_PASADOPARTICIPIO: case VERBO_REGULAR:
                case ADVIO_TIEMPO: case ADVIO_LUGAR: case ADVIO_CANTIDAD: case ADVIO_MODO: case ADVIO_AFIRMACION: case ADVIO_NEGACION: case ADVIO_DUDA:
                case PREPOSICION:
                case CONJUN_COOR_COPULATIVA: case CONJUN_COOR_ADVERSATIVA: case CONJUN_COOR_DISTRIBUTIVA: case CONJUN_COOR_DISYUNTIVA: case CONJUN_COOR_EXPLICATIVA:
                case CONJUN_SUBOR_CONDICIONAL: case CONJUN_SUBOR_CAUSAL: case CONJUN_SUBOR_CONSECUTIVA: case CONJUN_SUBOR_CONSESIVA: case CONJUN_SUBOR_COMPARATIVA: case CONJUN_SUBOR_FINAL:
                case INTERJECCION: case CONTRACCION:
                case PUNTO: case COMA: case PUNTOCOMA: case DOSPUNTOS: case INTERROGACIONABIERTO: case INTERROGACIONCERRADO: case ADMIRACIONABIERTO: 
                case ADMIRACIONCERRADO: case PARENTESISABIERTO: case PARENTESISCERRADO: case CORCHETEABIERTO: case CORCHETECERRADO: case GUION: case ASTERISCO: case DIAGONAL:
                case PREGUNTA:
                    
//                   if(lexer.lexeme.length()>15)
//                    {
//                    //Txp_SalidaTexto.setText("error el token "+"'"+token+" "+lexer.lexeme+"'"+" mayor a 15 caracteres");
//                        salida+="error el token "+"'"+token+" "+lexer.lexeme+"'"+" mayor a 15 caracteres"+"\n";
//                        Txp_SalidaTexto.setText(salida);
//                    }else
//                    {
                        //Txp_SalidaTexto.setText("TOKEN: "+token+" "+lexer.lexeme);
                        salida+="TOKEN: "+token+" "+lexer.lexeme+"\n";
                        Txp_SalidaTexto.setText(salida);
//                    }
                        Expre.put(token, lexer.lexeme);
                        
                   
                break;
                
                case ERROR:
                    Expre.clear();//si hay un erro significa que el token no existe se limpia la expresion para evitar escribir en la tabla estos valores erroneos
                    
                default:
                    Txp_SalidaTexto.setText("TOKEN: "+token);
            }
            
            
            //llenando la tabla
             Iterator iterador = Expre.entrySet().iterator();
                    Map.Entry producto;
                        while (iterador.hasNext()) {
                            
                            producto = (Map.Entry) iterador.next();
            
            if(Expre.isEmpty() == true)
            {
                dtm.addRow(new Object[]{
                 producto.getKey(), producto.getValue()});
                
                
            }     
            else
            {
                   if(producto.getValue().equals(lexer.lexeme))
                   {
                       dtm.addRow(new Object[]{
                 producto.getKey(), producto.getValue()});
                   }
            }
        
                   
           }
        }
 }


}

